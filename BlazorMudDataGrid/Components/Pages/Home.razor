@page "/"
@using Dapper
@using MudBlazor
@using System.Data
@inject IDbConnection DbConnection

<MudDataGrid T="IDictionary<string, object>"
Items="@bindData"
@ref="dataGrid"
Bordered="true"
Striped="true"
Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Dynamic Data Grid</MudText>
        <MudSpacer />
        <!-- 데이터 새로고침 버튼 -->
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadDynamicData">Load Data</MudButton>
    </ToolBarContent>
    <Columns>
        <!-- No 컬럼(행 번호) 고정 표시 -->
        <PropertyColumn Property="@(x => x["No"])" Title="No" Sortable="true" Filterable="true" />

        <!-- 동적으로 생성된 컬럼 반복 출력 (No, IsChecked 제외) -->
        @foreach (var columnKey in dynamicColumns.Where(key => key != "No"))
        {
            if (columnKey == "IsChecked")
            {
                <!-- 체크박스 컬럼 커스텀 셀 템플릿 -->
                <PropertyColumn Property="@(x => x["IsChecked"])" Title="Cb" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <MudCheckBox T="bool"
                        Value="@((bool)context.Item["IsChecked"])"
                        ValueChanged="@(async (bool value) => await OnCheckboxChanged(context.Item, value))" 
                        Color="Color.Primary" />
                    </CellTemplate>
                </PropertyColumn>
            }
            else
            {
                <!-- 일반 동적 컬럼 출력 -->
                <PropertyColumn Property="@(x => x[columnKey])" Title="@columnKey" Sortable="true" Filterable="true" />
            }
        }
    </Columns>
    <PagerContent>
        <!-- 페이지네이션 컨트롤 -->
        <MudDataGridPager T="IDictionary<string, object>" />
    </PagerContent>
</MudDataGrid>

@code {
    /// <summary>
    /// DataGrid 참조 변수
    /// </summary>
    private MudDataGrid<IDictionary<string, object>> dataGrid;
    /// <summary>
    ///  바인딩할 데이터 리스트
    /// </summary>
    private List<IDictionary<string, object>> bindData = new();
    /// <summary>
    /// 동적으로 추출한 컬럼명 리스트
    /// </summary>
    private List<string> dynamicColumns = new();

    /// <summary>
    /// 컴포넌트 초기화 시 동적 데이터 로드
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadDynamicData();
    }

    /// <summary>
    /// 체크박스 값 변경 시 호출되는 이벤트 핸들러
    /// </summary>
    /// <param name="item">체크박스가 속한 행의 데이터(IDictionary)</param>
    /// <param name="isChecked">변경된 체크박스 값</param>
    private async Task OnCheckboxChanged(IDictionary<string, object> item, bool isChecked)
    {
        // 해당 항목의 IsChecked 값 업데이트
        item["IsChecked"] = isChecked;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// 데이터베이스에서 동적 데이터 로드
    /// </summary>
    private async Task LoadDynamicData()
    {
        IEnumerable<dynamic> dynamicItems = await DbConnection.QueryAsync("SELECT * FROM Products");

        int no = 1;
        bindData = new();
        foreach (var item in dynamicItems)
        {
            var dictionary = new Dictionary<string, object>();
            var expando = item as IDictionary<string, object>;

            // No 컬럼 추가
            dictionary["No"] = no++;

            if (expando != null)
            {
                foreach (var kvp in expando)
                {
                    dictionary[kvp.Key] = kvp.Value;
                }
            }

            // Check 컬럼 추가
            dictionary["IsChecked"] = no % 2 == 0 ? false : true;

            bindData.Add(dictionary);
        }

        // 동적 컬럼 키 추출 (첫 번째 아이템 기준)
        if (dynamicItems.Any())
        {
            dynamicColumns = bindData.First().Keys.ToList();
        }

        await InvokeAsync(StateHasChanged);
    }
}