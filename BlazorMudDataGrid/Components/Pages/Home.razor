@page "/"
@using Dapper
@using MudBlazor
@using System.Data
@inject IDbConnection DbConnection

<MudDataGrid T="IDictionary<string, object>"
Items="@bindData"
@ref="dataGrid"
Bordered="true"
Striped="true"
Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Dynamic Data Grid</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadDynamicData">Load Data</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="@(x => x["No"])" Title="No" Sortable="true" Filterable="true"/>
        @foreach (var columnKey in dynamicColumns.Where(key => key != "No" && key != "IsChecked"))
        {
            <PropertyColumn Property="@(x => x[columnKey])"
            Title="@columnKey"
            Sortable="true"
            Filterable="true" />
        }

        <PropertyColumn Property="@(x => x["IsChecked"])" Title="Cb" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudCheckBox T="bool"
                Value="@((bool)context.Item["IsChecked"])"
                ValueChanged="@(async (bool value) => await OnCheckboxChanged(context.Item, value))"
                Color="Color.Primary" />
            </CellTemplate>
        </PropertyColumn>

        @* <PropertyColumn Property="@(x => x["IsChecked"])" Title="Cb" Sortable="true" Filterable="true" > *@
        @*     <CellTemplate> *@
        @*         <MudCheckBox T="bool" *@
        @*                      Color="Color.Primary"/> *@
        @*     </CellTemplate> *@
        @* </PropertyColumn> *@
    </Columns>
    <PagerContent>
        <MudDataGridPager T="IDictionary<string, object>" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<IDictionary<string, object>> dataGrid;
    private List<IDictionary<string, object>> bindData = new();
    private List<string> dynamicColumns = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDynamicData();
    }

    private async Task OnCheckboxChanged(IDictionary<string, object> item, bool isChecked)
    {
        // 해당 항목의 IsChecked 값 업데이트
        item["IsChecked"] = isChecked;

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadDynamicData()
    {
        IEnumerable<dynamic> dynamicItems = await DbConnection.QueryAsync("SELECT * FROM Products");

        int no = 1;
        bindData = new();
        foreach (var item in dynamicItems)
        {
            var dictionary = new Dictionary<string, object>();
            var expando = item as IDictionary<string, object>;

            // No 컬럼 추가
            dictionary["No"] = no++;

            if (expando != null)
            {
                foreach (var kvp in expando)
                {
                    dictionary[kvp.Key] = kvp.Value;
                }
            }

            // No 컬럼 추가
            dictionary["IsChecked"] = no % 2 == 0 ? false : true;

            bindData.Add(dictionary);
        }

        // 서버사이드에서 동적 데이터 로드 (예: API나 DB에서)
        // dynamicItems = new List<IDictionary<string, object>>
        // {
        //     new Dictionary<string, object> { { "Name", "John Doe" }, { "Age", 30 }, { "City", "Seoul" } },
        //     new Dictionary<string, object> { { "Name", "Jane Smith" }, { "Age", 25 }, { "City", "Busan" } },
        //     new Dictionary<string, object> { { "Name", "Bob Johnson" }, { "Age", 35 }, { "City", "Incheon" } }
        // };

        // 동적 컬럼 키 추출 (첫 번째 아이템 기준)
        if (dynamicItems.Any())
        {
            dynamicColumns = bindData.First().Keys.ToList();
        }

        await InvokeAsync(StateHasChanged);
    }
}